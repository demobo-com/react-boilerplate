/**
 *
 * {{properCase name }}
 *
 */

import React from 'react';
// import PropTypes from 'prop-types';
{{#if wantHeaders}}
{{#if wantMessages}}
import { injectIntl, intlShape } from 'react-intl';
{{/if}}
{{/if}}
import { connect } from 'react-redux';
import { compose } from 'redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
import injectReducer from 'utils/injectReducer';
{{/if}}
{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}

{{#if wantMessages}}
import TranslatedMessage{{#if wantHeaders}}, { formatMessage }{{/if}} from 'components/TranslatedMessage';
import messages from './messages';
{{/if}}
{{#if wantActionsAndReducer}}
import makeSelect{{properCase name}} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
import './{{ camelCase name }}.scss';

export class {{ properCase name }} extends {{{ type }}} { // eslint-disable-line react/prefer-stateless-function
  render() {
    {{#if wantHeaders}}
    {{#if wantMessages}}
    const { intl } = this.props;

    {{/if}}
    {{/if}}
    return (
      <div className="{{ kebabCase name }} page-container">
      {{#if wantHeaders}}
        <Helmet
        {{#if wantMessages}}
          title={formatMessage(intl, messages, '{{ camelCase name }}')}
        {{else}}
          title="{{ properCase name }}"
        {{/if}}
          meta={{curly true}}[
            {{curly true}} name: 'description', content: 'Description of {{properCase name}}' {{curly}},
          ]{{curly}}
        />

      {{/if}}
      {{#if wantMessages}}
        <TranslatedMessage messages={messages} messageId="header" />
      {{/if}}
      </div>
    );
  }
}

{{ properCase name }}.propTypes = {
  // dispatch: PropTypes.func.isRequired,
  {{#if wantHeaders}}
  {{#if wantMessages}}
  intl: intlShape.isRequired,
  {{/if}}
  {{/if}}
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
  {{ camelCase name }}: makeSelect{{properCase name}}(),
});

{{/if}}
function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });

{{else}}
const withConnect = connect(null, mapDispatchToProps);

{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });
{{/if}}

export default compose(
{{#if wantHeaders}}
{{#if wantMessages}}
  injectIntl,
{{/if}}
{{/if}}
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  withSaga,
{{/if}}
  withConnect,
)({{ properCase name }});
